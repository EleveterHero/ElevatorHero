using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using System.Collections.Generic;

#if UNITY_EDITOR
using UnityEditor;      //!< デプロイ時にEditorスクリプトが入るとエラーになるので
#endif

public class BackSprite : MonoBehaviour {

	static Dictionary<string,Sprite> g_static_sprites = null;

	public bool move = false;
	public float speed = 5.0f;


	bool floorchanged_from_outside = false;

	[SerializeField]
	float m_floor = 0.0f;
	public float floor
	{
		get
		{
			return m_floor;
		}
		set
		{
			if (m_floor != value)
			{
				floorchanged_from_outside = true;
				m_floor = value;
			}
		}

	}
	

	float delta_move_from_start = 0.0f;

	float delta_move = 0.0f;

	GameObject[] backsprites = null;

	public bool loop = false;


	void Awake()
	{
		if(g_static_sprites == null)
		{
		   g_static_sprites = new Dictionary<string, Sprite>();


			foreach (Sprite sp in Resources.LoadAll<Sprite>("Image/BattleBack"))
			{
				g_static_sprites.Add(sp.name, sp);
			}

		}

		int i = 0;
		backsprites = new GameObject[10];

		for(int j=0;j<backsprites.Length;j++)
		{ 
			backsprites[j] = new GameObject("back" + i);
			backsprites[j].transform.SetParent(transform);

			SpriteRenderer renderer=
			backsprites[j].AddComponent<SpriteRenderer>();

			renderer.sprite = g_static_sprites["28488748"];

			backsprites[j].layer = LayerMask.NameToLayer("BackGround");
			backsprites[j].transform.localPosition = new Vector3(0.0f,i*20.0f,0.0f);
			backsprites[j].transform.localScale = new Vector3(3.0f, 3.0f, 1.0f);
			backsprites[j].SetActive(false);
			i++;
		}
	}



	// Use this for initialization
	void Start () {
		backsprites[0].SetActive(true);

	}
	
	// Update is called once per frame
	void Update () {
		if (move)
		{

			if (!CheckFloorChanged())
			{
				delta_move = speed * Time.deltaTime;
				delta_move_from_start += delta_move;
				m_floor = delta_move_from_start / 20.0f + 1.0f;
			}


			if (loop)
			{
				if (backsprites[backsprites.Length - 1].transform.localPosition.y <= 0.0f)
				{
					delta_move = -delta_move_from_start;
					delta_move_from_start = 0;

				}
			}		


			SetPositions();



		}
		
	}


	bool CheckFloorChanged()
	{
		if (floorchanged_from_outside)
		{
			delta_move = -(delta_move_from_start - 20.0f * m_floor);

			delta_move_from_start = 20.0f * m_floor;
			floorchanged_from_outside = false;

			return true;
		}
		return false;
	}

	void SetPositions()
	{

		foreach (GameObject ob in backsprites)
		{
			Vector3 pos = ob.transform.localPosition;

			pos -= new Vector3(0.0f, delta_move, 0.0f);

			if (pos.y > -100 && pos.y < 100)
			{
				ob.SetActive(true);
			}
			else
			{
				ob.SetActive(false);
			}

			ob.transform.localPosition = pos;
		}
	}



	//====================================================================================================


#if UNITY_EDITOR

	[CustomEditor(typeof(BackSprite))]
	public class BackSpriteEditer : Editor
	{
		public override void OnInspectorGUI()
		{

			serializedObject.Update();
			// 対象となるオブジェクト
			var backsprite = target as BackSprite;

			// プロパティ用のGUI追加
			backsprite.move = EditorGUILayout.Toggle("Move", backsprite.move);
			backsprite.loop = EditorGUILayout.Toggle("Loop", backsprite.loop);
			backsprite.speed = EditorGUILayout.FloatField("Speed", backsprite.speed);
			backsprite.floor = EditorGUILayout.FloatField("Floor(ReadOnly)", backsprite.floor);


			serializedObject.ApplyModifiedProperties();
			
		}
	}


#endif






}
